install.packages("tidyverse")
library(tidyverse)
library(lubridate)
load("~/.RData")
load("~/.RData")
install.packages("tidyverse")
library("ggplot2")
library("palmerpenguins")
install.packages("tidyverse")
install.packages("palmerpenguins")
install.packages("rmarkdown")
install.packages("tidyverse")
install.packages("palmerpenguins")
library("ggplot2")
library("palmerpenguins")
ggplot(data=penguins) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g))
ggplot(data=penguins) +
geom_point(mapping=aes(x=flipper_length_mm, y=body_mass_g), color="purple")
install.packages("tidyverse")
install.packages("palmerpenguins")
library(tidyverse)
library(ggplot2)
library(palmerpenguins)
data(penguins)
View(penguins)
ggplot(data = penguins) +
geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
chooseCRANmirror(ind=1)
tinytex::install_tinytex()
install.packages("vitae")
library(vitae)
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(readr)
install.packages("skimr")
library(skimr)
install.packages("janitor")
library(janitor)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
getwd()
setwd("D:\\Learning and Data Science\\Google Data Analytics\\Course 8_Google Data Analytics Capstone Complete a Case Study\\R")
activity <- read.csv("dailyActivity_merged.csv")
calories <- read.csv("dailyCalories_merged.csv")
intensities <- read.csv("dailyIntensities_merged.csv")
steps <- read.csv("dailySteps_merged.csv")
sleep <- read.csv("sleepDay_merged.csv")
weight <- read.csv("weightLogInfo_merged.csv")
head(activity)
str(activity)
head(calories)
str(calories)
head(intensities)
str(intensities)
head(steps)
str(steps)
head(sleep)
str(sleep)
head(weight)
str(weight)
activity_new <- activity %>%
rename_with(tolower) %>%
mutate(date = as.Date(activitydate, "%m/%d/%y")) # fixing date formats
str(activity_new) # preview the results
activity_new <- activity %>%
rename_with(tolower)
str(activity_new) # preview the results
activity_new$activitydate <- as.Date(activity_new$activitydate, format="%m/%d/%Y")
str(activity_new) #preview the results with column activitydate converted into date format
activity_new <- activity %>%
rename_with(tolower) %>%
mutate(activitydate = as.Date(activitydate, format="%m/%d/%Y"))
str(activity_new)
activity_new <- activity %>%
rename_with(tolower) %>% #converting column names
mutate(activitydate = as.Date(activitydate, format="%m/%d/%Y")) #fixing date formats
str(activity_new) #preview the result
str(intensities)
#intensities
intensities_new <- intensities %>%
rename_with(tolower) %>%
mutate(date = as.Date(activityday, "%m/%d/%y")) # fixing data formats
str(intensities_new) # preview the results
intensities_new <- intensities %>%
rename_with(tolower) %>%
mutate(activityday = as.Date(activityday, format="%m/%d/%Y")) # fixing data formats
str(intensities_new) # preview the results
str(calories)
calories_new <- calories %>%
rename_with(tolower) %>% #converting column names
mutate(activityday = as.Date(activityday, format="%m/%d/%Y")) # fixing date formats
str(intensities_new) # preview the results
#calories
calories_new <- calories %>%
rename_with(tolower) %>% #converting column names
mutate(activityday = as.Date(activityday, format="%m/%d/%Y")) # fixing date formats
str(calories_new) # preview the results
str(steps)
#steps
steps_new <- steps %>%
rename_with(tolower) %>% #converting column names
mutate(activityday = as.Date(activityday, format="%m/%d/%Y")) # fixing date formats
str(steps_new) # preview the results
str(sleep)
sleep_new <- sleep %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(sleepday = as.POSIXct(sleepday, format="%m/%d/%Y %I:%M:%S %p")) # fixing date formats
str(sleep_new) # preview the results
test_date <- as.POSIXct("4/12/2016 12:00:00 AM", format="%m/%d/%Y %I:%M:%S %p")
print(test_date)
test_date <- as.POSIXct("4/12/2016 12:00:00 AM", format="%m/%d/%Y %I:%M:%S %p", tz="UTC")
print(test_date)
test_date <- as.POSIXct("4/12/2016 12:00:00 AM", format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
print(test_date)
Sys.getlocale("LC_TIME")
original_locale <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
test_date <- as.POSIXct("4/12/2016 12:00:00 AM", format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
print(test_date)
print(format(test_date, "%Y-%m-%d %H:%M:%S"))
test_date_noon <- as.POSIXct("4/12/2016 12:00:00 PM", format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
print(format(test_date_noon, "%Y-%m-%d %H:%M:%S"))
sleep_new <- sleep %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(sleepday = as.POSIXct(sleepday, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
str(sleep_new) # preview the results
print(format(sleep_new$sleepday, "%Y-%m-%d %H:%M:%S"))
str(weight)
weight_new <- weight %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(date = as.POSIXct(date, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
str(weight_new) # preview the results
n_distinct(activity_new$id)
n_distinct(intensities_new$id)
n_distinct(calories_new$id)
n_distinct(steps_new$id)
n_distinct(sleep_new$id)
n_distinct(weight_new$id)
summary(activity_new)
activity_new %>%
select(totalsteps,
totaldistance,
sedentaryminutes, calories) %>%
summary()
activity_new %>%
select(veryactiveminutes,
fairlyactiveminutes,
lightlyactiveminutes) %>%
summary()
View(intensities_new)
View(activity_new)
intensities_new %>%
select(sedentaryminutes,
lightlyactiveminutes,
veryactiveminutes) %>%
summary(intensities_new)
View(calories_new)
calories_new %>%
select(calories) %>%
summary(calories_new)
#sleep
View(sleep_new)
sleep_new %>%
select(totalminutesasleep) %>%
summary(sleep_new)
View(weight_new)
View(steps_new)
steps_new %>%
select(steptotal) %>%
summary(steps_new)
View(weight_new)
weight_new %>%
select(weightkg,
bmi) %>%
summary(weight_new)
View(activity_new)
View(intensities_new)
View(calories_new)
View(steps_new)
View(sleep_new)
View(weight_new)
activity_new <- activity_new %>%
filter(!is.na(totalsteps), !is.na(sedentaryminutes))
ggplot(activity_new, aes(x = totalsteps, y = sedentaryminutes)) +
geom_point(alpha = 0.5, color = "blue") +  # Points with transparency for better visualization
geom_smooth(method = "lm", color = "red") +  # Linear regression line
labs(title = "Relationship between Total Steps and Sedentary Minutes",
x = "Total Steps",
y = "Sedentary Minutes") +
theme_minimal()
str(sleep_new)
sleep_new <- sleep_new %>%
mutate(sleepday_next = sleepday + 1)
# Prepare the sleep data to match the next day's activity
sleep_new <- sleep_new %>%
mutate(sleepday_next = sleepday +1) # Create a column for the next day
View(activity)
View(activity_new)
install.packages("tidyverse")
library(tidyverse)
library(ggplot2)
library(readr)
install.packages("skimr")
library(skimr)
install.packages("janitor")
library(janitor)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
getwd()
activity <- read.csv("dailyActivity_merged.csv")
calories <- read.csv("dailyCalories_merged.csv")
intensities <- read.csv("dailyIntensities_merged.csv")
steps <- read.csv("dailySteps_merged.csv")
#The Janitor package has functions for cleaning data.
install.packages("janitor")
install.packages("janitor")
sleep <- read.csv("sleepDay_merged.csv")
weight <- read.csv("weightLogInfo_merged.csv")
activity_new <- activity %>%
rename_with(tolower) %>% #Convert column names to lowercase
mutate(activitydate = as.Date(activitydate, format="%m/%d/%Y")) #fixing date formats
intensities_new <- intensities %>%
rename_with(tolower) %>% #Convert column names to lowercase
mutate(activityday = as.Date(activityday, format="%m/%d/%Y"))
calories_new <- calories %>%
rename_with(tolower) %>% #Convert column names to lowercase
mutate(activityday = as.Date(activityday, format="%m/%d/%Y"))
steps_new <- steps %>%
rename_with(tolower) %>% #Convert column names to lowercase
mutate(activityday = as.Date(activityday, format="%m/%d/%Y"))
sleep_new <- sleep %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(sleepday = as.POSIXct(sleepday, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
str(sleep_new) # preview the results
weight_new <- weight %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(date = as.POSIXct(date, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
sleep_new <- sleep_new %>%
mutate(sleepday_next = sleepday +1) # Create a column for the next day
combined_data_1 <- merge(activity_new, sleep_new, by.x = c("id", "activitydate"), by.y = c("id", "sleepday_next"))
# Check the merged data
head(combined_data_1)
View(sleep_new)
head(sleep_new)
sleep_new <- sleep %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(sleepday = as.POSIXct(sleepday, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
str(sleep_new) # preview the results
weight_new <- weight %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(date = as.POSIXct(date, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
str(weight_new) # preview the results
Sys.getlocale("LC_TIME")
original_locale <- Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
test_date <- as.POSIXct("4/12/2016 12:00:00 AM", format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
print(test_date)
print(format(test_date, "%Y-%m-%d %H:%M:%S"))
test_date_noon <- as.POSIXct("4/12/2016 12:00:00 PM", format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())
print(format(test_date_noon, "%Y-%m-%d %H:%M:%S"))
sleep_new <- sleep %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(sleepday = as.POSIXct(sleepday, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
str(sleep_new) # preview the results
#weight
#Now, I need to follow the same steps as those for the sleep dataset.
weight_new <- weight %>%
rename_with(tolower) %>%  #Convert column names to lowercase
mutate(date = as.POSIXct(date, format="%m/%d/%Y %I:%M:%S %p", tz=Sys.timezone())) # fixing date formats
str(weight_new) # preview the results
sleep_new <- sleep_new %>%
mutate(sleepday_next = sleepday +1) # Create a column for the next day
combined_data_1 <- merge(activity_new, sleep_new, by.x = c("id", "activitydate"), by.y = c("id", "sleepday_next"))
head(combined_data_1)
View(combined_data_1)
combined_data_1 <- combined_data_1 %>%
filter(!is.na(totalsteps), !is.na(totalminutesasleep))
# Creating a scatter plot of previous night's sleep vs. next day's total steps
ggplot(combined_data_1, aes(x = totalminutesasleep, y = totalsteps)) +
geom_point(alpha = 0.5) +  # Semi-transparent points to handle overplotting
geom_smooth(method = "lm", color = "blue") +  # Adds a linear regression line
labs(title = "Impact of Sleep on Next Day's Activity",
x = "Total Sleep Minutes (Previous Night)",
y = "Total Steps (Next Day)") +
theme_minimal()
# Plot for Calories Burned vs. Very Active Minutes
ggplot(activity_new, aes(x = veryactiveminutes, y = calories)) +  # Initiate a ggplot graph, specify data source and aesthetics: x-axis for very active minutes and y-axis for calories
geom_point(alpha = 0.4, color = "red") +  # Add scatter plot points with partial transparency (alpha = 0.4) and red color
geom_smooth(method = "lm", color = "red") +  # Add a linear regression line to the plot to show the trend, colored red
labs(title = "Calories Burned vs. Very Active Minutes",  # Add labels: set the title of the graph
x = "Very Active Minutes",  # Label for the x-axis
y = "Calories Burned") +  # Label for the y-axis
theme_minimal()  # Use a minimal theme for the plot for a clean and modern look
# Plot for Calories Burned vs. Lightly Active Minutes
ggplot(activity_new, aes(x = lightlyactiveminutes, y = calories)) +  # Initiate a ggplot graph, specify data source and aesthetics: x-axis for lightly active minutes and y-axis for calories
geom_point(alpha = 0.4, color = "blue") +  # Add scatter plot points with partial transparency (alpha = 0.4) and blue color
geom_smooth(method = "lm", color = "blue") +  # Add a linear regression line to the plot to show the trend, colored blue
labs(title = "Calories Burned vs. Lightly Active Minutes",  # Add labels: set the title of the graph
x = "Lightly Active Minutes",  # Label for the x-axis
y = "Calories Burned") +  # Label for the y-axis
theme_minimal()  # Use a minimal theme for the plot for a clean and modern look
# Plot for Calories Burned vs. Sedentary Minutes
ggplot(activity_new, aes(x = sedentaryminutes, y = calories)) +  # Initiate a ggplot graph, specify data source and aesthetics: x-axis for sedentary minutes and y-axis for calories
geom_point(alpha = 0.4, color = "green") +  # Add scatter plot points with partial transparency (alpha = 0.4) and green color
geom_smooth(method = "lm", color = "green") +  # Add a linear regression line to the plot to show the trend, colored green
labs(title = "Calories Burned vs. Sedentary Minutes",  # Add labels: set the title of the graph
x = "Sedentary Minutes",  # Label for the x-axis
y = "Calories Burned") +  # Label for the y-axis
theme_minimal()  # Use a minimal theme for the plot for a clean and modern look
View(calories_new)
View(weight_new)
View(steps_new)
View(activity_new)
combined_data_2 <- merge(activity_new, weight_new, by = "id")
head(combined_data_2)
# Plot for BMI vs. Total Steps
ggplot(combined_data_2, aes(x = bmi, y = totalsteps)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "blue") +
labs(title = "BMI vs. Total Steps",
x = "BMI",
y = "Total Steps") +
theme_minimal()
# Plot for BMI vs. Sedentary Minutes
ggplot(combined_data_2, aes(x = bmi, y = sedentaryminutes)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "BMI vs. Sedentary Minutes",
x = "BMI",
y = "Sedentary Minutes") +
theme_minimal()
